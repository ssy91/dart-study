// 1. Dart는 기본적으로 한 줄씩 차례로 실행하는 "동기적인 언어"입니다.
// 2. 하지만 시간이 오래 걸리는 작업(예: 서버 통신)은 멈추지 않고 넘기기 위해
// "비동기"로 처리할 수 있습니다.
// 3. 비동기 처리를 하려면 함수에 async 키워드를 붙이고,
// 시간이 오래 올리는 작업 앞에는 await를 붙입니다.
// 4. await는 결과가 나올 때까지 기다렸다가, 다음 줄 코드를 실행합니다.
// 우리가 어느 작업을 하다가 반드시 진행해야 하는 작업이 필요한 경우, 이 때 동기를 이용하게 됨
// 동기를 이용하기 위해서는 동기가 작동해야 하는 부분(함수)가 async 로 선언되어 있어야 함.
// async가 작성된 함수에서 await 를 만나게 될 경우, 컴퓨터는 await 에 해당되는 부분이 만족할 때까지
// 기다리고 있다가, 해당 await 부분을 만족하는 상황이 발생하게 되면 다음 코드로 넘어감

// 동기란 무엇인가?
// 우리가 컴퓨터에게 작업을 주었을 때, 한 번의 작업이 끝날 때까지 다른 작업을 하지 않고 기다리는 것

// 함수 내에서 await 을 이용하여 비동기 프로그램을 만들고 싶을 땐 항상 단짝이 필요로 하는데,
// async 라는 것을 작성을 해주어야 함.
// async 를 작성하는 이유 : 컴퓨터에게 이 함수는 비동기로 작업을 할 것이다. 라고 지정하는 것.

// void main() async {
//   print("hi");
//   await Future.delayed(Duration(seconds: 5), () => print("hello")); // 오래 걸리는 작업
//   print("hi");
// }

// // hi hello hi 로 출력됨

void main() async {
  print("밥 주문하기");
  await Future.delayed(Duration(seconds: 3), () => print("밥 도착!"));
  print("밥 먹기");
}


// async, await 를 사용하지 않으면 밥 주문하기 밥 먹기 밥 도착! 으로 출력됨
// 그래서 async, await 를 사용해서 밥 주문하기 밥 도착! 밥 먹기 로 출력하기